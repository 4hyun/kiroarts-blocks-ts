/**
 * WordPress dependencies
 */
import { RichText, useBlockProps, useInnerBlocksProps, InspectorControls } from '@wordpress/block-editor';
import { ToggleControl, __experimentalToolsPanel as ToolsPanel, __experimentalToolsPanelItem as ToolsPanelItem } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useState } from '@wordpress/element';

/**
 * Internal dependencies
 */
import { useToolsPanelDropdownMenuProps } from '../utils/hooks';
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
const TEMPLATE = [['core/paragraph', {
  placeholder: __('Type / to add a hidden block')
}]];
function DetailsEdit({
  attributes,
  setAttributes
}) {
  const {
    showContent,
    summary,
    allowedBlocks
  } = attributes;
  const blockProps = useBlockProps();
  const innerBlocksProps = useInnerBlocksProps(blockProps, {
    template: TEMPLATE,
    __experimentalCaptureToolbars: true,
    allowedBlocks
  });
  const [isOpen, setIsOpen] = useState(showContent);
  const dropdownMenuProps = useToolsPanelDropdownMenuProps();
  return /*#__PURE__*/_jsxs(_Fragment, {
    children: [/*#__PURE__*/_jsx(InspectorControls, {
      children: /*#__PURE__*/_jsx(ToolsPanel, {
        label: __('Settings'),
        resetAll: () => {
          setAttributes({
            showContent: false
          });
        },
        dropdownMenuProps: dropdownMenuProps,
        children: /*#__PURE__*/_jsx(ToolsPanelItem, {
          isShownByDefault: true,
          label: __('Open by default'),
          hasValue: () => showContent,
          onDeselect: () => {
            setAttributes({
              showContent: false
            });
          },
          children: /*#__PURE__*/_jsx(ToggleControl, {
            __nextHasNoMarginBottom: true,
            label: __('Open by default'),
            checked: showContent,
            onChange: () => setAttributes({
              showContent: !showContent
            })
          })
        })
      })
    }), /*#__PURE__*/_jsxs("details", {
      ...innerBlocksProps,
      open: isOpen,
      children: [/*#__PURE__*/_jsx("summary", {
        onClick: event => {
          event.preventDefault();
          setIsOpen(!isOpen);
        },
        children: /*#__PURE__*/_jsx(RichText, {
          identifier: "summary",
          "aria-label": __('Write summary'),
          placeholder: __('Write summaryâ€¦'),
          allowedFormats: [],
          withoutInteractiveFormatting: true,
          value: summary,
          onChange: newSummary => setAttributes({
            summary: newSummary
          })
        })
      }), innerBlocksProps.children]
    })]
  });
}
export default DetailsEdit;
//# sourceMappingURL=edit.js.map